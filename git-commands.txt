Git Commands:
1. git version
2. git config --global user.name "vishnu" <-- Setting username 
3. git config --global user.email "vichu_77@yahoo.com" <-- Setting email
4. git config --global --list <-- Getting username & email
5. git clone https://github.com/VishnuParthasarathy/github-demo.git <-- Cloning GitHub repo locally
6. git status
7. git add <file-name> <-- Adding a file for git to track
8. git status (would show the file to be committed)
9. git commit -am "A message" <-- adding and commiting changes to local repo
10. git status would show the working dir is clean
11. Git branch name would be shown once a repo is initialized.
12. git branch -m main <-- Changing a branch name
13. git config --global --list <-- Listing global config
14. git push origin main or git push
15. git config --global core.editor "notepad++. exe -multiInst -nosession"
16. git add . <-- Adding all the files on the "pwd" recursively
17. git pull origin main
18. git remote add origin https://github.com/VishnuParthasarathy/starter-web.git <-- To add a remote origin
19. git remote get-url --all origin <-- To get remote URL
20. git remote set-url origin https://github.com/VishnuParthasarathy/starter-web.git <-- To update the remote url
21. git pull origin main <-- Pulls the repo from remote to local
22. git push origin main <-- Pushes from local to remote
23. git ls-files <-- To show list of files that git is tracking
24. git reset HEAD hipster.txt or 
25. git restore --staged hipster.txt <-- To unstage the file from staging area
26. git restore hipster.txt <-- To undo (ctrl+z) any changes
27. git mv hipster.txt git_commands.txt <-- To rename or move a file
28. git rm <file-name> & git commit -m "message" <-- To delete a file
29. git restore <filename> <-- To undo delete before git commit 
30. git help log
31. git log <-- Gives details on commits
32. git log --oneline --graph --decorate <-- Commits in a single line
33. git log sha1...sha2 <-- Between two commits
34. git log --since="3 days"
35. git log -- <filename> <-- To get commit history for a specific file
36. git show <commitID> <-- To show details on a specific commit
37. git config --global alias.<alias-name> "git command w/o the word git"
38. Use .gitignore <-- To ignore any files by git
39. git diff <-- To show the difference in Staging area vs the working area
40. git diff HEAD <-- To show difference in working area vs local repository (last commit)
41. git diff --stage HEAD <-- To show difference in staging area vs local repository (last commit)
42. git diff -- <filename> <-- To show difference for a single file
43. git log --online and git diff <commitID1> <commitID1> (Bottom Up)
44. git diff HEAD HEAD^ <-- To show difference between last commit (N) and (N-1)
45. git diff main origin/main <-- To show difference between local repository and remote repository.

<<<<<<< HEAD
Rebasing:
0. When working with a feature branch, if we need catch up with the changes in main, we can use rebase.
1. git rebase main <-- To catch up with main branch
2. git fetch origin main <-- To update the reference between origin and main (Non-destructive)
=======
Branching and Merging:
0. Branch creates a copy of the current branch to work with before merging with "main" branch
1. Isolate "Feature" or "Topic" branches
2. git branch -a <-- To list all branches
	- * Indicates the current branch
	- Displayes all branches in Local and Remote Repository
3. git branch <New-branch-name> <-- To create a New Branch
4. git checkout mynewbranch <-- To switch to new branch 
5. git branch -m <old-name> <new-name> <-- To rename a branch
6. git branch -d <branch-name>
7. git diff <branch-1> <branch-2> <-- To show difference between two branches
8. git checkout <branch1> and git merge <branch2> <-- To merge changes made in branch-2 to branch-1
9. Fast forwarding merge is only possible when "NO" commits are in <branch-1>
10. git branch -d <branch-name> <-- To delete a branch
>>>>>>> 9bb3be6 (Local: Commit to add merge commands to git_commands.txt)
