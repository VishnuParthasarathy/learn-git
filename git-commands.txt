 
https://www.youtube.com/watch?v=xuB1Id2Wxak

Git Intermediate Training:
PPT Info : https://intermediate.gitgood.training/dev-workflow
Learn GIT: https://learngitbranching.js.org/
Labs:
1. https://intermediate.gitgood.training/labs/warm-up
2. https://intermediate.gitgood.training/labs/feature-branch-flow
3. https://intermediate.gitgood.training/labs/remotes
4. https://intermediate.gitgood.training/labs/cherry-pick
5. https://intermediate.gitgood.training/labs/revert
6. https://intermediate.gitgood.training/labs/reset
7. https://intermediate.gitgood.training/labs/bisect
8. https://intermediate.gitgood.training/labs/rebase
9. https://intermediate.gitgood.training/labs/squashing

************************************************************************************************************************************************************************************
Git Course Notes:

1. Git is a distributed source control system (VCS).
2. Open source, very fast (since most of commands locally).
3. Repository contains files, history, config managed by Git.
4. Three States of Git: (Local)
	- Working Directory (User has full control)
	- Staging Area (User can put and pull)
	- Commit - Git Repository (history)
5. Remote Repository.
6. Master Branch-Timeline with chabges
7. Git Installation: git-scm.com git-for-windows.githib.io) 
8. github.com
9. notepad-plus-plus.org
10. Config file location:
	- Local
	- Global
	- System

Git Config Commands:
1. git version
2. git config --global user.name "vishnu" <-- Setting username 
3. git config --global user.email "vichu_77@yahoo.com" <-- Setting email
4. git config --global core.editor "notepad++. exe -multiInst -nosession"
5. git config --global alias.<alias-name> "git command w/o the word git" <-- To configure alias
6. git config --global --list <-- Listing global config
7. Use .gitignore <-- To ignore any files by git

Git Configuring Remote Origin:
1. git remote add origin https://github.com/VishnuParthasarathy/starter-web.git <-- To add a remote origin
2. git remote get-url --all origin <-- To get remote URL
3. git remote set-url origin https://github.com/VishnuParthasarathy/starter-web.git <-- To update the remote url
4. git remote set-url --add <name> http://10.65.42.20:7990/scm/test/ansible-playbooks.git --> To add a remote URL
5. git remote set-url --delete <name> http://10.65.94.100:7990/scm/test/ansible-playbooks.git
6. git remote set-url --add <name> http://visparth@10.65.42.20:7990/scm/test/ansible-playbooks.git or git remote show origin

Remote Repo Cloning, Staging and commiting: 
0. git init <dir name> --> To create or initialize a new Repo. Git branch name would be shown once a repo is initialized.
1. git clone https://github.com/VishnuParthasarathy/github-demo.git <-- Cloning GitHub repo locally
2. git add <file-name> <-- Adding a file for git to track
3. git add . <-- Adding all the files on the "pwd" recursively
4. git status (would show the file to be committed)
5. git commit -am "A message" <-- adding and commiting changes to local repo
6. git status would show the working dir is clean
7. git ls-files <-- To show list of files that git is tracking

Pulling from remote and Pushing to remote:
1. git pull origin main <-- Pulls the repo from remote to local
2. git push origin main or git push <-- Pushes from local to remote
3. git push -u origin main <-- Pushes committed files to origin and main branch
4. git push --repo=ansible_repo 

Display Commit History:
1. git help log
2. git log <-- Gives details on commits
3. git log --since="3 days"
4. git log --oneline --graph --decorate <-- Commits in a single line
5. git log -- <filename> <-- To get commit history for a specific file
6. git log sha1...sha2 <-- Between two commits
7. git show <commitID> <-- To show details on a specific commit
8. git log --oneline and git diff <commitID1> <commitID1> (Bottom Up)

Undo Changes:
1. git restore --staged <filename> <-- To unstage the file from staging area before commit
2. git restore <filename> <-- To undo (ctrl+z) any changes from the working directory before commit
3. git revert <commit-d>, use git reflog to get the commit-id <-- To revert any changes after commit
3. git mv hipster.txt git_commands.txt <-- To rename or move a file
4. git rm <file-name> & git commit -m "message" <-- To delete a file

To show differences: 
1. git diff <-- To show the difference in Staging area vs the working area
2. git diff HEAD <-- To show difference in working area vs local repository (last commit)
3. git diff --stage HEAD <-- To show difference in staging area vs local repository (last commit)
4. git diff -- <filename> <-- To show difference for a single file
5. git diff HEAD HEAD^ <-- To show difference between last commit (N) and (N-1)
6. git diff main origin/main <-- To show difference between local repository and remote repository. 

Branching and Merging:
0. Branch creates a copy of the current branch to work with before merging with "main" branch
	- git merge <-- fastforwards the merge from feature branch to main branch
	- Which means that git simply moves the pointer to the feature branch commit
	 - "--no-ff" means no fastforward, git does a merge commit 
1. Isolate "Feature" or "Topic" branches
2. git branch -a <-- To list all branches
	- * Indicates the current branch
	- Displayes all branches in Local and Remote Repository
3. git branch <New-branch-name> <-- To create a New Branch
4. git checkout mynewbranch <-- To switch to new branch 
5. git branch -m <old-name> <new-name> <-- To rename a branch
6. git branch -d <branch-name>
7. git diff <branch-1> <branch-2> <-- To show difference between two branches
8. git checkout <branch1> and git merge <branch2> <-- To merge changes made in branch-2 to branch-1
9. Fast forwarding merge is only possible when "NO" commits are in <branch-1>
10. git branch -d <branch-name> <-- To delete a branch
11. git branch -m main <-- Renaming a branch name

Rebasing:
0. When working with a feature branch, if we need catch up with the changes in main, we can use rebase.
1. git rebase main <-- To catch up with main branch
2. git fetch origin main <-- To update the reference between origin and main (Non-destructive)
3. git pull --rebase origin main <-- To update the local main branch with the changes in remote repository
4. git rebase --continue <-- To continue if any conflicts

Stashing:
0. To stash any wip files and work on another file.
1. git stash <-- To stash a tracked file in working directory
2. git stash apply <-- To bring back the file to continue working
3. git stash list <-- To list the stash
4. git stash drop <-- To drop the last stash in list
5. git stash -u <-- To stash untracked file
6. git stash pop <-- To apply and drop stash

Tagging:
0. Creating a label during a commit
1. git tag <tag-name> <-- To create a simple tag
2. git tag -a <tag-nam> <-- To create a annotated tag
3. git tag --list <-- To list the tags

Reset and Reflog:
1. git reflog <-- To show all the commits done manually or by git
2. git reset HEAD^ or HEAD@{#} <-- To reset the commit pointer to one level below (H-1) or HEAD@{#}